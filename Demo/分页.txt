1、

/**
	 * 这就是先查询所有的数据，然后去分页数据
     * 注意 这种方式处理海量数据的时候，容易内存溢出
	 * @param query
	 * @param pageIndex--第几页
	 * @param pageSize--每页显示多少数据
	 */
	public void searchPage(String query,int pageIndex,int pageSize) {
		try {
			Directory dir = FileIndexUtils.getDirectory();
			IndexSearcher searcher = getSearcher(dir);
			QueryParser parser = new QueryParser(Version.LUCENE_35,"content",new StandardAnalyzer(Version.LUCENE_35));
			Query q = parser.parse(query);
			TopDocs tds = searcher.search(q, 500);
			//注意 此处把500条数据放在内存里。
			ScoreDoc[] sds = tds.scoreDocs;
			int start = (pageIndex-1)*pageSize;
			int end = pageIndex*pageSize;
			for(int i=start;i<end;i++) {
				Document doc = searcher.doc(sds[i].doc);
				System.out.println(sds[i].doc+":"+doc.get("path")+"-->"+doc.get("filename"));
			}
			
			searcher.close();
		} catch (org.apache.lucene.queryParser.ParseException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

===============================================================================================================================================================


2、

/**
	 * 根据页码和分页大小获取上一次最后一个ScoreDoc
	 * @param pageIndex
	 * @param pageSize
	 * @param query
	 * @param indexSearcher
	 * @return
	 * @throws IOException
	 */
	private ScoreDoc getLastScoreDoc(int pageIndex,int pageSize,Query query,IndexSearcher indexSearcher) throws IOException{
		if(pageIndex==1)return null;//如果是第一页返回空
		int num = pageSize*(pageIndex-1);//获取上一页的数量
		TopDocs tds = indexSearcher.search(query, num);
		return tds.scoreDocs[num-1];
	}
	
	public void searchPage(String query,int pageIndex,int pageSize){
		IndexSearcher indexSearcher = getSearcher();
		QueryParser parser = new QueryParser("content", new StandardAnalyzer());
		Query q = null;
		try {
			q = parser.parse(query);
			//获取上一页的最后一个元素
			ScoreDoc lastScoreDoc = getLastScoreDoc(pageIndex, pageSize, q, indexSearcher);
			//通过最后一个元素搜索下页的pageSize个元素
			TopDocs topDocs = indexSearcher.searchAfter(lastScoreDoc,q,pageSize);
			for (ScoreDoc item : topDocs.scoreDocs) {
				Document doc = indexSearcher.doc(item.doc);
				Calendar cal = Calendar.getInstance();
				cal.setTimeInMillis(Long.valueOf(doc.get("date")));
				System.out.println("名字:" + doc.get("name") + "邮箱:" + doc.get("email") + "id:" + doc.get("id") + "附件个数:"
						+ doc.get("attach") + "日期:" + cal.getTime().toString());
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}