using Lucene.Net.Analysis.Standard;
using Lucene.Net.Documents;
using Lucene.Net.Index;
using Lucene.Net.Store;
using Lucene.Net.Util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using JiebaNetForLucene;
using Lucene.Net.Search;
using Spatial4n.Core.Context;
using Lucene.Net.Spatial;
using Lucene.Net.Spatial.Prefix.Tree;
using Lucene.Net.Spatial.Prefix;
using Spatial4n.Core.Shapes;
using Lucene.Net.Spatial.Queries;
using Spatial4n.Core.Distance;
using Lucene.Net.Queries.Function;

namespace TestLucene
{
    class Program
    {
        static void Main(string[] args)
        {
            string indexDir = "D:\\indexTest";
            var version = LuceneVersion.LUCENE_48;
            var fsdDir = FSDirectory.Open(indexDir);
            var analyzer = new JiebaAnalyzer();
            var indexConfig = new IndexWriterConfig(version, analyzer)
            {
                OpenMode = OpenMode.CREATE_OR_APPEND,
                RAMBufferSizeMB = 16,
                //MaxBufferedDocs = 10,
                //MaxBufferedDeleteTerms = 10
            };

            var writer = new IndexWriter(fsdDir, indexConfig);

            //索引

            //var doc = new Document();
            //doc.AddStringField("name", "mongodb", Field.Store.YES);
            //doc.AddTextField("address", "传感器是在上个世纪中期开始兴起的一种高科技，随着信息化产业迅猛发展", Field.Store.YES);
            //writer.AddDocument(doc);




            //搜索
            //var reader = writer.GetReader(true);
            //var search = new IndexSearcher(reader);



            //var term = new Term("address", "发展");
            //var query = new TermQuery(term);

            //var parser = new QueryParser(version, null, analyzer);

            //var query = parser.Parse("address:zn");

            //TopDocs topDocs = search.Search(query, 10);
            //ScoreDoc[] docs = topDocs.ScoreDocs;

            //foreach (ScoreDoc scoreDoc in docs)
            //{
            //    var myDoc = search.Doc(scoreDoc.Doc);
            //    Console.WriteLine(myDoc.Get("name"));
            //    Console.WriteLine(myDoc.Get("address"));
            //}

            //writer.Flush(false, false);
            //writer.Flush(true, true);
            //writer.Commit();

            SpatialContext ctx = SpatialContext.GEO;
            int maxLevels = 11;
            SpatialPrefixTree grid = new GeohashPrefixTree(ctx, maxLevels);
            SpatialStrategy strategy = new RecursivePrefixTreeStrategy(grid, "myGeoField");

            var doc2 = new Document();

            //IShape shape = ctx.ReadShapeFromWkt("POINT(60.9289094 -50.7693246)"); //WKT表示法：POINT(Longitude,Latitude)  
            IPoint point = ctx.MakePoint(-80.93, 33.77); //这里的x,y即经纬度，x为Longitude(经度),y为Latitude(纬度) 
            doc2.AddStoredField(strategy.FieldName, point.X.ToString() + " " + point.Y.ToString());
            var fields = strategy.CreateIndexableFields(point);
            foreach (var item in fields)
            {
                doc2.Add(item);
            }
            writer.AddDocument(doc2);

            //搜索方圆200千米范围以内,这里-80.0, 33.0分别是当前位置的经纬度，以当前位置为圆心，200千米为半径画圆  (地球半径：6378.137KM)
            SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, ctx.MakeCircle(-80.0, 33.0, DistanceUtils.Dist2Degrees(200, DistanceUtils.EARTH_MEAN_RADIUS_KM)));
            Filter filter = strategy.MakeFilter(spatialArgs);

            var reader = writer.GetReader(true);
            var search = new IndexSearcher(reader);

            TopDocs topDocs = search.Search(new MatchAllDocsQuery(), filter, 10);

            ScoreDoc[] docs = topDocs.ScoreDocs;

            foreach (ScoreDoc scoreDoc in docs)
            {
                var myDoc = search.Doc(scoreDoc.Doc);
                Console.WriteLine(myDoc.Get("myGeoField"));
            }

            //====================================================//

            //定义一个坐标点(x,y)即(经度,纬度)即当前用户所在地点  
            IPoint pt = ctx.MakePoint(-80.93, 33.77);
            //计算当前用户所在坐标点与索引坐标点中心之间的距离即当前用户地点与每个待匹配地点之间的距离，DEG_TO_KM表示以KM为单位  
            ValueSource valueSource = strategy.MakeDistanceValueSource(pt, DistanceUtils.DEG_TO_KM);
            //根据命中点与当前位置坐标点的距离远近降序排，距离数字大的排在前面，false表示降序，true表示升序  
            Sort distSort = new Sort(valueSource.GetSortField(false)).Rewrite(search);
            TopDocs topdocs = search.Search(new MatchAllDocsQuery(), 10, distSort);  

            //***java****
            //ScoreDoc[] scoreDocs = topdocs.scoreDocs;  
            //for (ScoreDoc scoreDoc : scoreDocs) {  
            //int docId = scoreDoc.doc;  
            //Document document = indexSearcher.doc(docId);  
            //int gotid = document.getField("id").numericValue().intValue();  
            //String geoField = document.getField(strategy.getFieldName()).stringValue();  
            //int xy = geoField.indexOf(' ');  
            //double xPoint = Double.parseDouble(geoField.substring(0, xy));  
            //double yPoint = Double.parseDouble(geoField.substring(xy + 1));  
            //double distDEG = ctx  
            //        .calcDistance(args.getShape().getCenter(), xPoint, yPoint);  
            //double juli = DistanceUtils.degrees2Dist(distDEG,DistanceUtils.EARTH_MEAN_RADIUS_KM);  
            //System.out.println("docId:" + docId + ",id:" + gotid + ",distance:" + juli + "KM");

            //关闭
            writer.Dispose();
            Console.ReadKey();
        }
    }
}
